{
  "version": 3,
  "sources": ["../src/index.ts", "../src/browser.ts"],
  "sourcesContent": ["type Options = {\n  target: string;\n  customClass: {\n    ol: string;\n    li: string;\n    a: string;\n  };\n};\n\nexport class TOCParser {\n  selector: string;\n  options: Options;\n\n  constructor(selector: string, options: Options) {\n    this.selector = selector;\n    this.options = options;\n  }\n\n  setAttrs(elements: any, callback: Function) {\n    elements.forEach((node: any, i: number) => {\n      let sub = Array.from(node.childNodes);\n      let uniqueId = (str: string, index: number) => {\n        return str.replace(/[^A-Z]+/gi, \"\").toLowerCase() + \"-\" + index;\n      };\n      if (sub.length) this.setAttrs(sub, callback);\n\n      if (node.dataset && Object.keys(node.dataset).indexOf(\"toc\") !== -1) {\n        node.setAttribute(\"id\", uniqueId(node.textContent, i));\n        callback({\n          id: node.getAttribute(\"id\"),\n          level: parseInt(node.getAttribute(\"data-toc\")),\n          title: node.textContent.trim(),\n        });\n      }\n    });\n  }\n\n  /**\n   * Create HTML string\n   */\n  parse(): string {\n    let element = document.querySelector(this.selector);\n    let classes = { ...this.options.customClass };\n    if (!element) {\n      throw Error(\"Invalid selector\");\n    }\n\n    let headers: Array<{ id: string; level: number; title: string }> = [];\n    let contents = Array.from(element.childNodes);\n    this.setAttrs(contents, (opt: any) => headers.push(opt));\n    let setClass = (str: string): string => (str ? `class=\"${str}\"` : \"\");\n    let listItem = (item: any) => {\n      let a = `<a ${setClass(classes.a)} href=\"#${item.id}\">${item.title}</a>`;\n      return `<li ${setClass(classes.li)}>${a}</li>`;\n    };\n\n    let prev = 1;\n    let html = \"\";\n\n    headers.forEach((header) => {\n      if (header.level === prev) {\n        html += listItem(header);\n      } else if (header.level < prev) {\n        html += \"</ol>\".repeat(prev - header.level) + listItem(header);\n      } else {\n        html += `<ol ${setClass(classes.ol)}>${listItem(header)}`;\n      }\n\n      prev = header.level;\n    });\n\n    return `<ol ${setClass(classes.ol)}>${html}</ol>`;\n  }\n\n  /**\n   * Render HTML string to specific element\n   */\n  render() {\n    let target = document.querySelector(this.options.target);\n    if (!target) {\n      throw Error(\"Invalid selector\");\n    }\n\n    target.innerHTML = String(this.parse());\n  }\n}\n\nexport default TOCParser;\n", "import { TOCParser } from \"./index\";\n\n(window as any).TOCParser = TOCParser;\n"],
  "mappings": "4WASO,IAAMA,EAAN,KAAgB,CAIrB,YAAYC,EAAkBC,EAAkB,CAC9C,KAAK,SAAWD,EAChB,KAAK,QAAUC,CACjB,CAEA,SAASC,EAAeC,EAAoB,CAC1CD,EAAS,QAAQ,CAACE,EAAWC,IAAc,CACzC,IAAIC,EAAM,MAAM,KAAKF,EAAK,UAAU,EAChCG,EAAW,CAACC,EAAaC,IACpBD,EAAI,QAAQ,YAAa,EAAE,EAAE,YAAY,EAAI,IAAMC,EAExDH,EAAI,QAAQ,KAAK,SAASA,EAAKH,CAAQ,EAEvCC,EAAK,SAAW,OAAO,KAAKA,EAAK,OAAO,EAAE,QAAQ,KAAK,IAAM,KAC/DA,EAAK,aAAa,KAAMG,EAASH,EAAK,YAAaC,CAAC,CAAC,EACrDF,EAAS,CACP,GAAIC,EAAK,aAAa,IAAI,EAC1B,MAAO,SAASA,EAAK,aAAa,UAAU,CAAC,EAC7C,MAAOA,EAAK,YAAY,KAAK,CAC/B,CAAC,EAEL,CAAC,CACH,CAKA,OAAgB,CACd,IAAIM,EAAU,SAAS,cAAc,KAAK,QAAQ,EAC9CC,EAAUC,EAAA,GAAK,KAAK,QAAQ,aAChC,GAAI,CAACF,EACH,MAAM,MAAM,kBAAkB,EAGhC,IAAIG,EAA+D,CAAC,EAChEC,EAAW,MAAM,KAAKJ,EAAQ,UAAU,EAC5C,KAAK,SAASI,EAAWC,GAAaF,EAAQ,KAAKE,CAAG,CAAC,EACvD,IAAIC,EAAYR,GAAyBA,EAAM,UAAUA,KAAS,GAC9DS,EAAYC,GAAc,CAC5B,IAAIC,EAAI,MAAMH,EAASL,EAAQ,CAAC,YAAYO,EAAK,OAAOA,EAAK,YAC7D,MAAO,OAAOF,EAASL,EAAQ,EAAE,KAAKQ,QACxC,EAEIC,EAAO,EACPC,EAAO,GAEX,OAAAR,EAAQ,QAASS,GAAW,CACtBA,EAAO,QAAUF,EACnBC,GAAQJ,EAASK,CAAM,EACdA,EAAO,MAAQF,EACxBC,GAAQ,QAAQ,OAAOD,EAAOE,EAAO,KAAK,EAAIL,EAASK,CAAM,EAE7DD,GAAQ,OAAOL,EAASL,EAAQ,EAAE,KAAKM,EAASK,CAAM,IAGxDF,EAAOE,EAAO,KAChB,CAAC,EAEM,OAAON,EAASL,EAAQ,EAAE,KAAKU,QACxC,CAKA,QAAS,CACP,IAAIE,EAAS,SAAS,cAAc,KAAK,QAAQ,MAAM,EACvD,GAAI,CAACA,EACH,MAAM,MAAM,kBAAkB,EAGhCA,EAAO,UAAY,OAAO,KAAK,MAAM,CAAC,CACxC,CACF,ECnFC,OAAe,UAAYC",
  "names": ["TOCParser", "selector", "options", "elements", "callback", "node", "i", "sub", "uniqueId", "str", "index", "element", "classes", "__spreadValues", "headers", "contents", "opt", "setClass", "listItem", "item", "a", "prev", "html", "header", "target", "TOCParser"]
}
