{
  "version": 3,
  "sources": ["../src/index.ts", "../src/browser.ts"],
  "sourcesContent": ["type Options = {\n  target: string;\n  customClass: {\n    ol: string;\n    li: string;\n    a: string;\n  };\n};\n\nexport default class TOCParser {\n  selector: string;\n  options: Options;\n\n  constructor(selector: string, options: Options) {\n    this.selector = selector;\n    this.options = options;\n  }\n\n  setAttrs(elements: any, callback: Function) {\n    elements.forEach((node: any, i: number) => {\n      let sub = Array.from(node.childNodes);\n      let uniqueId = (str: string, index: number) => {\n        return str.replace(/[^A-Z]+/gi, \"\").toLowerCase() + \"-\" + index;\n      };\n      if (sub.length) this.setAttrs(sub, callback);\n\n      if (node.dataset && Object.keys(node.dataset).indexOf(\"toc\") !== -1) {\n        node.setAttribute(\"id\", uniqueId(node.textContent, i));\n        callback({\n          id: node.getAttribute(\"id\"),\n          level: parseInt(node.getAttribute(\"data-toc\")),\n          title: node.textContent.trim(),\n        });\n      }\n    });\n  }\n\n  render() {\n    let element = document.querySelector(this.selector);\n    let target = document.querySelector(this.options.target);\n    let classes = { ...this.options.customClass };\n    if (!element || !target) {\n      throw Error(\"Invalid selector\");\n    }\n\n    let headers: Array<{ id: string; level: number; title: string }> = [];\n    let contents = Array.from(element.childNodes);\n    this.setAttrs(contents, (opt: any) => headers.push(opt));\n\n    let listItem = (item: any) => {\n      return `<li class=\"${classes.li}\"><a class=\"${classes.a}\" href=\"#${item.id}\">${item.title}</a></li>`;\n    };\n    let prev = 1;\n    let html = \"\";\n\n    headers.forEach((header) => {\n      if (header.level === prev) {\n        html += listItem(header);\n      } else if (header.level < prev) {\n        html += \"</ol>\".repeat(prev - header.level) + listItem(header);\n      } else {\n        html += `<ol class=\"${classes.ol}\">${listItem(header)}`;\n      }\n\n      prev = header.level;\n    });\n\n    target.innerHTML = `<ol class=\"${classes.ol}\">${html}</ol>`;\n  }\n}\n", "import TOCParser from \"./index\";\n\n(window as any).TOCParser = TOCParser;\n"],
  "mappings": "4WASA,IAAqBA,EAArB,KAA+B,CAI7B,YAAYC,EAAkBC,EAAkB,CAC9C,KAAK,SAAWD,EAChB,KAAK,QAAUC,CACjB,CAEA,SAASC,EAAeC,EAAoB,CAC1CD,EAAS,QAAQ,CAACE,EAAWC,IAAc,CACzC,IAAIC,EAAM,MAAM,KAAKF,EAAK,UAAU,EAChCG,EAAW,CAACC,EAAaC,IACpBD,EAAI,QAAQ,YAAa,EAAE,EAAE,YAAY,EAAI,IAAMC,EAExDH,EAAI,QAAQ,KAAK,SAASA,EAAKH,CAAQ,EAEvCC,EAAK,SAAW,OAAO,KAAKA,EAAK,OAAO,EAAE,QAAQ,KAAK,IAAM,KAC/DA,EAAK,aAAa,KAAMG,EAASH,EAAK,YAAaC,CAAC,CAAC,EACrDF,EAAS,CACP,GAAIC,EAAK,aAAa,IAAI,EAC1B,MAAO,SAASA,EAAK,aAAa,UAAU,CAAC,EAC7C,MAAOA,EAAK,YAAY,KAAK,CAC/B,CAAC,EAEL,CAAC,CACH,CAEA,QAAS,CACP,IAAIM,EAAU,SAAS,cAAc,KAAK,QAAQ,EAC9CC,EAAS,SAAS,cAAc,KAAK,QAAQ,MAAM,EACnDC,EAAUC,EAAA,GAAK,KAAK,QAAQ,aAChC,GAAI,CAACH,GAAW,CAACC,EACf,MAAM,MAAM,kBAAkB,EAGhC,IAAIG,EAA+D,CAAC,EAChEC,EAAW,MAAM,KAAKL,EAAQ,UAAU,EAC5C,KAAK,SAASK,EAAWC,GAAaF,EAAQ,KAAKE,CAAG,CAAC,EAEvD,IAAIC,EAAYC,GACP,cAAcN,EAAQ,iBAAiBA,EAAQ,aAAaM,EAAK,OAAOA,EAAK,iBAElFC,EAAO,EACPC,EAAO,GAEXN,EAAQ,QAASO,GAAW,CACtBA,EAAO,QAAUF,EACnBC,GAAQH,EAASI,CAAM,EACdA,EAAO,MAAQF,EACxBC,GAAQ,QAAQ,OAAOD,EAAOE,EAAO,KAAK,EAAIJ,EAASI,CAAM,EAE7DD,GAAQ,cAAcR,EAAQ,OAAOK,EAASI,CAAM,IAGtDF,EAAOE,EAAO,KAChB,CAAC,EAEDV,EAAO,UAAY,cAAcC,EAAQ,OAAOQ,QAClD,CACF,ECnEC,OAAe,UAAYE",
  "names": ["TOCParser", "selector", "options", "elements", "callback", "node", "i", "sub", "uniqueId", "str", "index", "element", "target", "classes", "__spreadValues", "headers", "contents", "opt", "listItem", "item", "prev", "html", "header", "TOCParser"]
}
